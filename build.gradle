import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
		kotlinVersion = '1.1.51'
		springBootVersion = '1.5.7.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-actuator',
			'com.github.votoanthuan:sigar:1.6.4',
			'com.google.guava:guava:23.0',
			'commons-lang:commons-lang:2.6'

	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

springBoot {
	executable true
}

task winsw(type: Copy) {
	from ('winsw') {
		exclude '*.exe'

		filter(ReplaceTokens, tokens: [version: version])
	}
	from ('winsw') {
		include '*.exe'
	}
	into 'build/libs'

	rename { String fileName ->
		if (fileName == 'WinSW.NET4.exe') {
			return 'pcmonitor-' + version + '.exe'
		} else if (fileName == 'WinSW.NET4.xml') {
			return 'pcmonitor-' + version + '.xml'
		} else {
			return fileName
		}
	}
}

task nativeLibs(type: Copy) {
	from 'lib'
	into 'build/libs/lib'
}

task zipOutput(type: Zip) {
	from 'build/libs'
	include '**/*'
	archiveName 'pcmonitor-' + version + '.zip'
	destinationDir(file('build'))
}

build.doLast {
	tasks.nativeLibs.execute()
	tasks.winsw.execute()
	tasks.zipOutput.execute()
}